
#include "U8glib.h"
#include <math.h> 
#include <DS3231.h>
#include <EEPROM.h>
#include <stdio.h>
DS3231  rtc(SDA, SCL);

int a=A1,b=A0,c=A2,temp,week,tim,yr,br;
uint8_t brt,cnt;

char x[12]; 
U8GLIB_ST7920_128X64_4X u8g(12,11,10);
const unsigned char PROGMEM space5 [] =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 
  0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
  0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 
  0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 
  0x04, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 
  0xFF, 0x3F, 0x00, 0x20, 0x04, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 
  0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x30, 0x04, 0x00, 0xFE, 0xFF, 
  0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x7F, 0x00, 0xF0, 
  0x0F, 0x00, 0xFE, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 
  0xFF, 0xFF, 0x00, 0xF0, 0x0F, 0x00, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 
  0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0x03, 0xF0, 0x0F, 0xC0, 0xFF, 0xFF, 
  0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0x3F, 0xF8, 
  0x0F, 0xFC, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 
  0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 
  0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00 };

const unsigned char PROGMEM space7 [] =
{
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFE, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xCE, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x33, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x87, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xC3, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x98, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x0C, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 
  0x3C, 0x30, 0xFF, 0xFF, 0xFF, 0xFF, 0x0C, 0x3E, 0xFE, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x3F, 0x1E, 0x66, 0xFE, 0xFF, 0xFF, 0x7F, 0x66, 0x78, 
  0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x87, 0x67, 0xFE, 0xFF, 
  0xFF, 0x7F, 0xF3, 0xE1, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 
  0xE3, 0xCC, 0xFC, 0xFF, 0xFF, 0x3F, 0x33, 0xC7, 0xF1, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xC7, 0x31, 0x98, 0xFD, 0xFF, 0xFF, 0x9F, 0x19, 0x8E, 
  0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0x1C, 0x33, 0xF9, 0xFF, 
  0xFF, 0xDF, 0x4C, 0x18, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x73, 
  0x8E, 0x23, 0xF3, 0xEF, 0xF3, 0xCF, 0xE6, 0x31, 0xCE, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x39, 0xE7, 0x66, 0xF6, 0xEF, 0xF3, 0x6F, 0x72, 0x63, 
  0x8C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x99, 0x31, 0xCE, 0xE4, 0x1F, 
  0xF8, 0x27, 0x33, 0xCE, 0x98, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCC, 
  0x19, 0x98, 0x0D, 0x00, 0x00, 0x90, 0x19, 0x98, 0x31, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xCE, 0x8C, 0x31, 0xD9, 0x0F, 0xF0, 0xDB, 0x8C, 0x31, 
  0x33, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x66, 0xC6, 0x63, 0x32, 0x08, 
  0x10, 0x4E, 0xC6, 0x63, 0x66, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x33, 
  0xE3, 0xC7, 0x86, 0x03, 0xC0, 0x21, 0xE3, 0x67, 0x6C, 0xFE, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x3F, 0x33, 0xF1, 0x8F, 0x7D, 0x20, 0x24, 0xBE, 0xF9, 0xCF, 
  0xCC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x99, 0xF9, 0x3F, 0x89, 0x39, 
  0x9C, 0xD0, 0xFC, 0x9F, 0xD9, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xC9, 
  0xFC, 0x7F, 0x62, 0x0E, 0x30, 0x66, 0xFE, 0x3F, 0x99, 0xFD, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x9F, 0x4D, 0xFC, 0xFF, 0x1C, 0x07, 0xE0, 0x38, 0xFF, 0x3F, 
  0xB3, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0x6C, 0xFE, 0xFF, 0xC1, 0x03, 
  0xC0, 0x83, 0xFF, 0x7F, 0x36, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0x26, 
  0xFF, 0xFF, 0xF3, 0x01, 0x80, 0xCF, 0xFF, 0x7F, 0x26, 0xFB, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xDF, 0x36, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 
  0x64, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0xB2, 0xFF, 0xFF, 0x3F, 0x00, 
  0x00, 0xFE, 0xFF, 0xFF, 0x6C, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0x93, 
  0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x49, 0xFA, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x5F, 0x9B, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 
  0xC9, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0xDB, 0xFF, 0xFF, 0x7F, 0x00, 
  0x00, 0xFE, 0xFF, 0xFF, 0xDB, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0xCB, 
  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xDB, 0xFA, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x7F, 0xC9, 0xFF, 0xFF, 0xFF, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 
  0xD3, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0xC9, 0xFF, 0xFF, 0xFF, 0x01, 
  0x80, 0xFF, 0xFF, 0xFF, 0xD3, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0xE9, 
  0xFF, 0xFF, 0xFF, 0x03, 0xC0, 0xFF, 0xFF, 0xFF, 0xD3, 0xFA, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x5F, 0xED, 0xFF, 0xFF, 0xFF, 0x03, 0xC0, 0xFF, 0xFF, 0xFF, 
  0xD7, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xED, 0xFF, 0xFF, 0xFF, 0x07, 
  0xE0, 0xFF, 0xFF, 0xFF, 0xD7, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xED, 
  0xFF, 0xFF, 0xFF, 0x07, 0xE0, 0xFF, 0xFF, 0xFF, 0xD7, 0xFE, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x7F, 0xEB, 0xFF, 0xFF, 0xFF, 0x0F, 0xF0, 0xFF, 0xFF, 0xFF, 
  0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 0xFF, 0xFF, 0xFF, 0x0F, 
  0xF0, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 
  0xFF, 0xFF, 0xFF, 0x1F, 0xF8, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xEB, 0xFF, 0xFF, 0xFF, 0x1F, 0xF8, 0xFF, 0xFF, 0xFF, 
  0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xFF, 0xFF, 0xFF, 0x1F, 
  0xF8, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 
  0xFF, 0xFF, 0xFF, 0x1F, 0xFC, 0xFF, 0xFF, 0xFF, 0xEB, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xFF, 0x3F, 0xFC, 0xFF, 0xFF, 0xFF, 
  0xEB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0x3F, 
  0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 
  0xFF, 0xFF, 0xFF, 0x3F, 0xFE, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0xFF, 
  0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 
  0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 
  0xFF, 0xFF, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, };


void setup() {      
  rtc.begin();
  temp=EEPROM.read(2);
  week=EEPROM.read(4);
  tim=EEPROM.read(6);
  brt=EEPROM.read(8);
  cnt=EEPROM.read(10);
  yr=EEPROM.read(12);
  br=EEPROM.read(14);    
  analogWrite(3,brt);    // brt led
  analogWrite(5,cnt);     // cnt contrast
  u8g.setFont(u8g_font_unifont);
  u8g.setColorIndex(1);

    
  
  int i=0;
  
  while(i<128){
    u8g.firstPage();
  do {     
    u8g.drawStr(6,10,"WHY DO WE FALL?"); 
      analogWrite(2,128-i);      
      i+=2;
      u8g.drawBox(0,20,i,10);            
    } while( u8g.nextPage() );}
   
   
  u8g.firstPage();
  do {       
    u8g.drawXBMP(0,0, 128,64,space5);    
  } while( u8g.nextPage() );
  analogWrite(3,brt);
  delay(3000);
  //Serial.begin(9600);
}

void loop() {  
 // sleeper();    
  u8g.firstPage();
  do {  
    draw();
  } while( u8g.nextPage() );

  delay(499);
  
  u8g.firstPage();
  do {  
      draw2();
  } while( u8g.nextPage() );

  delay(500);
  if(analogRead(a)>900)
{    
  batman();
  delay(450);
  menu();          
}
}

void draw(void) { 
  char s[3];
  int x,z;
  float y;
  week=EEPROM.read(4); 
   
  if(br==1)
  {
    ;  
  }
  else if(br==2)
  {
    u8g.drawRFrame(0,0,128,64,5);
  }
  else if(br==3)
  {
    u8g.drawFrame(0,0,128,64);
  }
  u8g.setFontPosTop();
   
  if(tim==2)
  {u8g.setScale2x2();      // Scale up all draw procedures
  u8g.drawStr(16,0,":");
  u8g.drawStr(0, 1,rtc.getTimeStr(FORMAT_SHORT,true));  
  u8g.undoScale();      // IMPORTANT: Switch back to normal mode
  }
  else
  {u8g.setScale2x2();      // Scale up all draw procedures
  u8g.drawStr(16,0,":");
  u8g.drawStr(0, 1,rtc.getTimeStr(FORMAT_LONG,false)); 
  u8g.drawStr(40,0,":"); 
  u8g.undoScale();       
  }  
  
  if(yr==1)
  u8g.drawStr(2,30,rtc.getDateStr(FORMAT_LONG,FORMAT_LITTLEENDIAN,'/'));
  else if(yr==2)
  {
   u8g.setPrintPos(2,30);
   u8g.print(getDay());   
   itoa(getDay(),s,10);
   z=strlen(s);
   z=(z*8)+4; 
   u8g.setPrintPos(z, 30);
   u8g.print(rtc.getMonthStr(FORMAT_SHORT)); 
   x=strlen(rtc.getMonthStr(FORMAT_SHORT));
   x=(x*8)+2+z;
   u8g.setPrintPos(x, 30);
   u8g.print(getYear()); 
  }
  else if(yr==3)
  {char s[3];
   u8g.setPrintPos(2,30);
   u8g.print(getDay());   
   itoa(getDay(),s,10);
   z=strlen(s);
   z=(z*8)+4; 
   u8g.setPrintPos(z, 30);
   u8g.print(rtc.getMonthStr(FORMAT_LONG)); 
   x=strlen(rtc.getMonthStr(FORMAT_LONG));
   x=(x*8)+2+z;
   u8g.setPrintPos(x, 30);
   u8g.print(getYear());
   x=x+45;
      
   if(x>107 && week==2)
   {   
    week=1;   
   }    
  }
  
  if(week==2)
  u8g.drawStr(103,30,rtc.getDOWStr(FORMAT_SHORT));
  else
  u8g.drawStr(63,45,rtc.getDOWStr(FORMAT_LONG));
  
  if(temp==2)
   {
    x = round(rtc.getTemp()); 
    u8g.setPrintPos(2, 45);
   u8g.print(x); 
   u8g.setPrintPos(19, 48);
   u8g.print("\xb0");
   u8g.setPrintPos(24, 45);
   u8g.print('C'); 
    }
  else 
   {
    y = rtc.getTemp();
    u8g.setPrintPos(2, 45);
   u8g.print(y); 
   u8g.setPrintPos(40, 48);
   u8g.print("\xb0");
   u8g.setPrintPos(45, 45);
   u8g.print('C');  
    }
}

void draw2(void) { 
  char s[3];
  int x,z;
  float y;
  week=EEPROM.read(4); 
    
  if(br==1)
  {
    ;
  }
  else if(br==2)
  {
    u8g.drawRFrame(0,0,128,64,5);
  }
  else if(br==3)
  {
    u8g.drawFrame(0,0,128,64);
  }
  u8g.setFontPosTop(); 
   
  if(tim==2)
  {u8g.setScale2x2();      // Scale up all draw procedures
  u8g.drawStr(0, 1,rtc.getTimeStr(FORMAT_SHORT,true));  
  u8g.undoScale();      // IMPORTANT: Switch back to normal mode
  }
  else
  {u8g.setScale2x2();      // Scale up all draw procedures
  u8g.drawStr(0, 1,rtc.getTimeStr(FORMAT_LONG,false)); 
  u8g.undoScale();       
  }
  
  if(yr==1)
  u8g.drawStr(2,30,rtc.getDateStr(FORMAT_LONG,FORMAT_LITTLEENDIAN,'/'));
  else if(yr==2)
  {
   u8g.setPrintPos(2,30);
   u8g.print(getDay());   
   itoa(getDay(),s,10);
   z=strlen(s);
   z=(z*8)+4; 
   u8g.setPrintPos(z, 30);
   u8g.print(rtc.getMonthStr(FORMAT_SHORT)); 
   x=strlen(rtc.getMonthStr(FORMAT_SHORT));
   x=(x*8)+2+z;
   u8g.setPrintPos(x, 30);
   u8g.print(getYear());
  }
  else if(yr==3)
  {
   u8g.setPrintPos(2,30);
   u8g.print(getDay());   
   itoa(getDay(),s,10);
   z=strlen(s);
   z=(z*8)+4; 
   u8g.setPrintPos(z, 30);
   u8g.print(rtc.getMonthStr(FORMAT_LONG)); 
   x=strlen(rtc.getMonthStr(FORMAT_LONG));
   x=(x*8)+2+z;
   u8g.setPrintPos(x, 30);
   u8g.print(getYear()); 
   x=x+45;
   if(x>107 && week==2)
   {   
    week=1;    
   }
  }
  
  if(week==2)
  u8g.drawStr(103,30,rtc.getDOWStr(FORMAT_SHORT));
  else
  u8g.drawStr(63,45,rtc.getDOWStr(FORMAT_LONG));

  if(temp==2)
   {
    x = round(rtc.getTemp()); 
    u8g.setPrintPos(2, 45);
   u8g.print(x); 
   u8g.setPrintPos(19, 48);
   u8g.print("\xb0");
   u8g.setPrintPos(24, 45);
   u8g.print('C'); 
    }
  else 
   {
    y = rtc.getTemp();
    u8g.setPrintPos(2, 45);
   u8g.print(y); 
   u8g.setPrintPos(40, 48);
   u8g.print("\xb0");
   u8g.setPrintPos(45, 45);
   u8g.print('C');  
    }
   
}

/*void sleeper(){
    while(1){
  //int flag=0;
  int y=atoi(rtc.getTimeStr(FORMAT_SHORT,true));
  
  char a[7];
  strcpy(a,rtc.getTimeStr(FORMAT_SHORT,true));
  
  
   /* if(a[5]=='A')
    {
      flag=1;
    }
    else
    flag=0;
  
  if(a[5]=='A' && y<=5)
  { 
    analogWrite(2,0);
    analogWrite(3,0);
    u8g.firstPage();
  do {  
    
  } while( u8g.nextPage() );
  
  }
  else
  { analogWrite(2,brt);
    analogWrite(3,cnt);
    break;}
  
  }
}
*/
void menu()
{int j=1,tb;
  again: 
  tb=0;
  //batman();
  batman();
         delay(450);
  while(analogRead(c)<100)
  {
  switch(j)
  {case 1:u8gdisplay(0,0);
          break;
   case 2:u8gdisplay(10,4);         
          break;
   case 3:u8gdisplay(20,9);
          break;
   case 4:u8gdisplay(20,23);
          break; 
   case 5: u8gdisplay(20,37);
          break; 
   case 6: u8gdisplay(20,51);
          break;                                 
    }
    if(analogRead(b)>900)
    {
     j++;
     tb=0;
     delay(350);
     if(j>6)
     {j=1;}}
    if(analogRead(a)>900)
    {
     j--;
     tb=0;
     delay(350);
     if(j==0)
     {j=6;}}
   delay(100);
   tb++;
   if(tb==60)
   {
    j=6;
    break;
   }
  }
  
  if(j==6)
  return 0;
  
  functions(j);
  j=6;
  goto again;
}



void functions(int j)
{ uint8_t h,hm,m;
  int tb=0;
  uint16_t y;
  
  if(j==1)
  {h=0;hm=0; 
   batman();
         delay(450);                           //Time functn start 
   while(analogRead(c)<100)
   {u8gdraw(0,0,"HOUR: ",0,h,hm);   
                            //first digit
    if(analogRead(b)>900)
    {
     h++;
     delay(450);
     if(h>2)
     {h=0;}}
    if(analogRead(a)>900)
    {
     h--;
     delay(450);
     if(h==255)
     {h=2;}} 

     delay(100);
   }
   batman();
         delay(450);    
   while(analogRead(c)<100)
   {u8gdraw(0,0,"HOUR: ",10,h,hm);
                           //second digit
    if(analogRead(b)>900)
    {
     hm++;
     delay(450);
     if(hm>9)
     {hm=0;}}
    if(analogRead(a)>900)
    {
     hm--;
     delay(450);
     if(hm==255)
     {hm=9;}}
     delay(100);
   } 
   batman();
         delay(450);
   h=h*10;
   h=h+hm;
   
   if(h>23)
   h=23;
    
   m=0;hm=0;
   while(analogRead(c)<100)
   {u8gdraw(0,0,"Minutes: ",0,m,hm);                 
    if(analogRead(b)>900)                         //minute first digit
    {
     m++;
     delay(450);
     if(m>5)
     {m=0;}}
    if(analogRead(a)>900)
    {
     m--;
     delay(450);
     if(m==255)
     {m=5;}} 

     delay(100);
   }
    batman();
         delay(450);
    
   while(analogRead(c)<100)
   {u8gdraw(0,0,"Minutes: ",10,m,hm);
    if(analogRead(b)>900)                     //2nd digit
    {
     hm++;
     delay(450);
     if(hm>9)
     {hm=0;}}
    if(analogRead(a)>900)
    {
     hm--;
     delay(450);
     if(hm==255)
     {hm=9;}} 

     delay(100);
    
   } 
   delay(900);
   
   m=m*10;
   m=m+hm;
   batman();
         delay(450);
   hm=0;
   
   u8gdraw(0,0,"Setting Time.");
   rtc.setTime(h,m,hm);
   delay(1000);
                    //Time change end
   }
  else if(j==2)    //Date change begin
  {batman();
         delay(450);
   h=0;hm=1;
   while(analogRead(c)<100)
   {u8gdraw(0,0,"DATE: ",0,h,hm);
    if(analogRead(b)>900)       //first digit
    {
     h++;
     delay(450);
     if(h>3)
     {h=0;}}
    if(analogRead(a)>900)
    {
     h--;
     delay(450);
     if(h==255)
     {h=3;}}  
     delay(100);
   }
   batman();
         delay(450);  
   while(analogRead(c)<100)
   {u8gdraw(0,0,"DATE: ",10,h,hm);
    if(analogRead(b)>900)                     //2nd digit
    {
     hm++;
     delay(450);
     if(hm>9)
     {hm=0;}}
    if(analogRead(a)>900)
    {
     hm--;
     delay(450);
     if(hm==255)
     {hm=9;}}  
     delay(100);   
   }
   batman();
         delay(450);
   h=h*10;
   h=h+hm;
   
   if(h>31)
   {h=1;}
   
   hm=1;
   while(analogRead(c)<100)
   {u8gdraw(0,0,"MONTH: ",hm);             //month digit
    if(analogRead(b)>900)
    {
     hm++;
     delay(450);
     if(hm>12)
     {hm=1;}}
    if(analogRead(a)>900)
    {
     hm--;
     delay(450);
     if(hm<1)
     {hm=12;}}
     delay(100);
   }
   batman();
         delay(450);
   y=2019;
   while(analogRead(c)<100)
   { u8gdraw(0,0,"YEAR: ",y);    
    if(analogRead(b)>900)
    {
     y++;
     delay(450);
     if(y>2100)
     {y=2019;}}
    if(analogRead(a)>900)
    {
     y--;
     delay(450);
     if(y<2019)
     {y=2100;}}
     delay(100);
   }
  
    if(h==31&&(hm==4||hm==6||hm==9||hm==11))                     //date correction
    {h=30;}
    else if(hm==2)
    {
      if (y % 4 == 0)
    {
        if (y % 100 == 0)
        {
            if (y % 400 == 0)
               {if(h>29)
                   h=29;
               }
            else
                {if(h>28)
                   h=28;}
        }
        else
            {if(h>29)
                   h=29;
               }
    }
    else
        {if(h>28)
                   h=28;}
      }               
   batman();
         delay(450);
   m=1; 
   while(analogRead(c)<100)
   {
    switch(m)
    {
      case 1:u8gdisplayw(0,0);
          break;
      case 2:u8gdisplayw(10,4);         
          break;
      case 3:u8gdisplayw(20,9);
          break;
      case 4:u8gdisplayw(30,13);
          break; 
      case 5: u8gdisplayw(40,17);
          break;  
      case 6: u8gdisplayw(40,30);
          break;
      case 7: u8gdisplayw(40,44);
          break;                                    
    }     
    if(analogRead(b)>900)
    {
     m++;
     delay(450);
     if(m>7)
     {m=1;}}
    if(analogRead(a)>900)
    {
     m--;
     delay(450);
     if(m<1)
     {m=7;}}
     delay(100);
   }  
   rtc.setDate(h,hm,y);
   rtc.setDOW(m);
   u8gdraw(0,0,"SETTING DATE.");
   delay(1000);                                                     //Date change end
   }   
   else if(j==3)
   {batman();
         delay(450);                                                        //Brightness Adjust
    while(analogRead(c)<100)
   {u8gdraw(0,0,"BRIGHTNESS: ",brt); 
    if(analogRead(b)>900)
    {
     brt=brt+10;
     delay(450);
     if(brt>240)
     {brt=0;}}
    if(analogRead(a)>900)
    {
     brt=brt-10;
     delay(450);
     if(brt<0)
     {brt=240;}}
     delay(150);
     analogWrite(3,brt);
   }
    EEPROM.update(8,brt);   
   }
   else if(j==4)
    {batman();
         delay(450);                                                        //Brightness Adjust
    while(analogRead(c)<100)
   {u8gdraw(0,0,"CONTRAST: ",cnt); 
    if(analogRead(b)>900)
    {
     cnt=cnt+10;
     delay(450);
     if(cnt>240)
     {cnt=0;}}
    if(analogRead(a)>900)
    {
     cnt=cnt-10;
     delay(450);
     if(cnt<0)
     {cnt=240;}}
     delay(150);
     analogWrite(5,cnt);
   }
   EEPROM.update(10,cnt); 
   }
   else if(j==5)
   {h=1;
   loop1:
   batman();
         delay(450);
  while(analogRead(c)<100)
  {
  switch(h)
  {case 1:u8gcustmenu(0,0);
          break;
   case 2:u8gcustmenu(10,4);         
          break;
   case 3:u8gcustmenu(20,9);
          break;  
   case 4:u8gcustmenu(30,13);
          break; 
   case 5:u8gcustmenu(40,16);
          break;
   case 6:u8gcustmenu(50,20);
          break;                                      
    }
    if(analogRead(b)>900)
    {tb=0;
     h++;
     delay(450);
     if(h>6)
     {h=1;}}
    if(analogRead(a)>900)
    {tb=0;
     h--;
     delay(450);
     if(h==0)
     {h=6;}}
   delay(100);
   tb++;
   if(tb==60)
   {
    h=6;
    break;
   }
  }
  
  if(h==1)
   {hm=tim;
   //Serial.println(hm);
    batman();
         delay(450);                                                        //Brightness Adjust
    while(analogRead(c)<100)
   {
    switch(hm)
    {case 1:u8gmode(0,"1.24HR MODE","2.12HR MODE");
            tim=1;
            break;
     case 2:u8gmode(15,"1.24HR MODE","2.12HR MODE");
            tim=2;
            break;
    }
    if(analogRead(b)>900)
    {
     hm++;
     delay(450);
     if(hm>2)
     {hm=1;}} 
    if(analogRead(a)>900)
    {
     hm--;
     delay(450);
     if(hm==0)
     {hm=2;}}
     delay(150);     
   }
   EEPROM.update(6,tim);     
   }
   else if(h==2)
   {hm=temp;
    batman();
         delay(450);                                                        //Brightness Adjust
    while(analogRead(c)<100)
   {
    switch(hm)
    {case 1:u8gmode(0,"1.FLOATING","2.NON-FLOATING");
            temp=1;
            break;
     case 2:u8gmode(15,"1.FLOATING","2.NON-FLOATING");
            temp=2;
            break;
    }
    if(analogRead(b)>900)
    {
     hm++;
     delay(450);
     if(hm>2)
     {hm=1;}} 
    if(analogRead(a)>900)
    {
     hm--;
     delay(450);
     if(hm==0)
     {hm=2;}}
     delay(150);     
   }
   EEPROM.update(2,temp);  
   }
   else if(h==3)
   {hm=week;
    batman();
         delay(450);                                                        
    while(analogRead(c)<100)
   {
    switch(hm)
    {case 1:u8gmode(0,"1.FULL NAME","2.SHORT NAME");
            week=1;
            break;
     case 2:u8gmode(15,"1.FULL NAME","2.SHORT NAME");
            week=2;
            break;
    }
    if(analogRead(b)>900)
    {
     hm++;
     delay(450);
     if(hm>2)
     {hm=1;}} 
    if(analogRead(a)>900)
    {
     hm--;
     delay(450);
     if(hm==0)
     {hm=2;}}
     delay(150);     
   }   
    EEPROM.update(4,week);   
   }
   else if(h==4)
   {hm=yr;
    batman();
         delay(450);                                                        
    while(analogRead(c)<100)
   {
    switch(hm)
    {case 1:u8gmode(0,"1.DIGIT ONLY","2.MONTH SHORT","3.MONTH FULL");
            yr=1;
            break;
     case 2:u8gmode(15,"1.DIGIT ONLY","2.MONTH SHORT","3.MONTH FULL");
            yr=2;
            break;
     case 3:u8gmode(30,"1.DIGIT ONLY","2.MONTH SHORT","3.MONTH FULL");
            yr=3;
            break;        
    }
    if(analogRead(b)>900)
    {
     hm++;
     delay(350);
     if(hm>3)
     {hm=1;}} 
    if(analogRead(a)>900)
    {
     hm--;
     delay(350);
     if(hm==0)
     {hm=3;}}
     delay(150);     
   }
   EEPROM.update(12,yr); 
   if(yr==3)
   {   
    u8g.firstPage();
      do { 
          u8g.setPrintPos(0, 0);
          u8g.print("WEEK MODE WILL");
          u8g.setPrintPos(0, 15);
          u8g.print("BE UPDATED TO");
          u8g.setPrintPos(0, 30);
          u8g.print("FULL TO ACCOMOD-");  
          u8g.setPrintPos(0, 45);
          u8g.print("ATE WEEK.");                   
          } while( u8g.nextPage() );
          delay(3500);
   }  
   }
   else if(h==5)
   {hm=br;
    batman();
         delay(450);                                                        
    while(analogRead(c)<100)
   {
    switch(hm)
    {case 1:u8gmode(0,"1.BORDERLESS","2.ROUNDED","3.SQUARE");
            br=1;
            break;
     case 2:u8gmode(15,"1.BORDERLESS","2.ROUNDED","3.SQUARE");
            br=2;
            break;
     case 3:u8gmode(30,"1.BORDERLESS","2.ROUNDED","3.SQUARE");
            br=3;
            break;        
    }
    if(analogRead(b)>900)
    {
     hm++;
     delay(350);
     if(hm>3)
     {hm=1;}} 
    if(analogRead(a)>900)
    {
     hm--;
     delay(350);
     if(hm==0)
     {hm=3;}}
     delay(150);     
   }
   EEPROM.update(14,br); 
   }  
   else
   return 0;
   h=6;
   goto loop1;
}
}
   
void u8gcustmenu(int x,int y)
  {
     u8g.firstPage();
          do { u8g.drawVLine(110,0,64);
               u8g.drawVLine(127,0,64);
               u8g.drawStr(110, x,"<=");
               u8g.setPrintPos(0, -y);
               u8g.print("1.TIME MODE");
               u8g.setPrintPos(0, -y+15);
               u8g.print("2.TEMP. MODE");
               u8g.setPrintPos(0, -y+29);
               u8g.print("3.WEEK MODE"); 
               u8g.setPrintPos(0, -y+43);
               u8g.print("4.DATE MODE");
               u8g.setPrintPos(0, -y+57);
               u8g.print("5.BORDER");    
               u8g.setPrintPos(0, -y+71);
               u8g.print("6.BACK");     
               } while( u8g.nextPage() );
  }

void u8gdisplay(int y,int x)
{
  u8g.firstPage();
          do { u8g.drawVLine(110,0,64);
               u8g.drawVLine(127,0,64);
               u8g.drawStr(110, x,"<=");
               u8g.setPrintPos(0, -y);
               u8g.print("1.SET TIME");
               u8g.setPrintPos(0, -y+15);
               u8g.print("2.SET DATE");
               u8g.setPrintPos(0, -y+29);
               u8g.print("3.BRIGHTNESS");
               u8g.setPrintPos(0, -y+43);
               u8g.print("4.CONTRAST");
               u8g.setPrintPos(0, -y+57);
               u8g.print("5.CUSTOMIZE"); 
               u8g.setPrintPos(0, -y+71);
               u8g.print("6.BACK");           
               } while( u8g.nextPage() );
}

void u8gmode(int x,char c[10],char d[10])
{
  u8g.firstPage();
          do { u8g.drawVLine(110,0,64);
               u8g.drawVLine(127,0,64);
               u8g.drawStr(110, x,"<=");
               u8g.setPrintPos(0, 0);
               u8g.print(c);
               u8g.setPrintPos(0,15);
               u8g.print(d);                         
               } while( u8g.nextPage() );
}

void u8gmode(int x,char c[10],char d[10],char e[10])
{
  u8g.firstPage();
          do { u8g.drawVLine(110,0,64);
               u8g.drawVLine(127,0,64);
               u8g.drawStr(110, x,"<=");
               u8g.setPrintPos(0, 0);
               u8g.print(c);
               u8g.setPrintPos(0,15);
               u8g.print(d);
               u8g.setPrintPos(0,30);
               u8g.print(e);                          
               } while( u8g.nextPage() );
}

void u8gdisplayw(int y,int x)
{
  u8g.firstPage();
          do { u8g.drawVLine(110,0,64);
               u8g.drawVLine(127,0,64);
               u8g.drawStr(110, x,"<=");
               u8g.setPrintPos(0, -y);
               u8g.print("MONDAY");
               u8g.setPrintPos(0, -y+15);
               u8g.print("TUESDAY");
               u8g.setPrintPos(0, -y+29);
               u8g.print("WEDNSDAY");
               u8g.setPrintPos(0, -y+43);
               u8g.print("THURSDAY");
               u8g.setPrintPos(0, -y+57);
               u8g.print("FRIDAY");
               u8g.setPrintPos(0, -y+71);
               u8g.print("SATURDAY");
               u8g.setPrintPos(0, -y+85);
               u8g.print("SUNDAY");               
              } while( u8g.nextPage() );
}

void u8gdraw(int x,int y,char c[15])
{
  u8g.firstPage();
  do {     
    u8g.drawStr(x,y,c);        
  } while( u8g.nextPage() );
}

void u8gdraw(int a,int b,char c[15],uint8_t f)
{
  u8g.firstPage();
  do {  
    u8g.setPrintPos(a,b);
    u8g.print(c);
    int x = strlen(c);
    x=(x*7)+4;   
    u8g.setPrintPos(x,b);
    u8g.print(f);     
  } while( u8g.nextPage() ); 
}

void u8gdraw(int a,int b,char c[15],int y,uint8_t f,uint8_t g)
{
  u8g.firstPage();
  do {  
    u8g.setPrintPos(a,b);
    u8g.print(c); 
    int x = strlen(c);
    x=(x*7)+4; 
    u8g.setPrintPos(x,b);
    u8g.print(f);   
    u8g.setPrintPos(x+10,b);
    u8g.print(g);
    u8g.setPrintPos(x+y,b+15);
    u8g.print("^"); 
  } while( u8g.nextPage() );
 
}

void u8gdraw(int a,int b,char c[15],uint16_t f)
{
  u8g.firstPage();
  do {  
    u8g.setPrintPos(a,b);
    u8g.print(c); 
    int x = strlen(c);
    x=(x*7)+4;  
    u8g.setPrintPos(x,b);
    u8g.print(f);     
  } while( u8g.nextPage() ); 
}

int getDay(){
     char s[11];
     strcpy(s,rtc.getDateStr(FORMAT_LONG,FORMAT_LITTLEENDIAN,'/'));
     int x = atoi(s);
     return x;
}

int getYear(){
     char s[11];
     strcpy(s,rtc.getDateStr(FORMAT_LONG,FORMAT_LITTLEENDIAN,'/'));
     
     for(int i=0;i<6;i++)
     s[i]='0';
     
     int x = atoi(s);
     return x;
}

void batman(void)
{  
  u8g.firstPage();
  do {       
    u8g.drawXBMP(0,0, 128,64,space7);    
  } while( u8g.nextPage() );
}
